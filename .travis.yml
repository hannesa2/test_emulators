# use generic language
language: shell

os:
  - linux
#  - osx # x86 emulators require HAXM accelerator so removing for now.
         # see https://travis-ci.org/mmcc007/test_emulators/jobs/606234640#L899
         # (Flutter tests can be run on the iOS simulator.)

# ignored on osx
dist: bionic

# ignored on linux
#osx_image: xcode9.4 # current default

# specify global envs and jobs
env:
  global:
    - ABI=x86_64
    - EMU_FLAVOR=default # ignore "google_apis" and other cases
    - ANDROID_TOOLS=4333796 # android-28
    - ANDROID_HOME=${HOME}/android-sdk
    - EMU_FLAVOR=default # use google_apis flavor if no default flavor emulator
    - GRAVIS="https://raw.githubusercontent.com/DanySK/Gravis-CI/master/"
    - JDK="1.8"
    - TOOLS=${ANDROID_HOME}/tools
    # PATH order is incredibly important. e.g. the 'emulator' script exists in more than one place!
    - PATH=${ANDROID_HOME}:${ANDROID_HOME}/emulator:${TOOLS}:${TOOLS}/bin:${ANDROID_HOME}/platform-tools:${PATH}
    - FLUTTER_CHANNEL=stable
    - FLUTTER_VERSION=1.9.1+hotfix.6-${FLUTTER_CHANNEL}

  # define full matrix of SYS x ABI and comment-out or exclude invalid entries
  jobs:
    #- API=15 # only runs locally. Create+Start once from AndroidStudio to init sdcard. Then only from command-line w/-engine classic
    - API=16 ABI=x86 AUDIO=-no-audio
    - API=17 ABI=x86
    - API=18 ABI=x86 # API18 has started being flaky
    #- API=19 ABI=armeabi-v7a # Fails: kernel/emulator mismatch, and emulator-29+ doesn't support "-engine classic" to fix
    # API 20 was Android Wear only
    - API=21
    - API=22
    - API=23
    - API=24
    - API=25
    #- API=26 # Fails with unrecognized tests? orchestrator change or something?
    - API=27
    - API=28
    - API=29

jobs:
  fast_finish: true  # We can report success without waiting for jobs that we
                     # allow / expect to fail.
  include:
    - env: API=24 JDK="1.11"
  allow_failures:
    - env: API=16 ABI=x86 AUDIO=-no-audio # flutter test hangs
    - env: API=17 ABI=x86 # flutter test hangs
    - env: API=18 ABI=x86 # flakey: gradlew fails sometimes during test
                          # "Could not load compiled classes for settings file"
    - env: API=24 JDK="1.11"
    - os: osx
  # (The test stage is implicit, add other stages here.)

before_install:
  # fix timezone warning on osx
  - if [ $TRAVIS_OS_NAME == "osx" ]; then sudo ln -sf /usr/share/zoneinfo/US/Pacific /etc/localtime; fi

  # Set up KVM
  - |
    if [ $TRAVIS_OS_NAME == "linux" ]; then
      # Install dependencies
      sudo apt-get -y --no-install-recommends install bridge-utils libpulse0 libvirt-bin qemu-kvm virtinst ubuntu-vm-builder
      # add travis user to groups
      sudo adduser $USER libvirt
      sudo adduser $USER kvm
    fi

  # Set up JDK 8 for Android SDK
  - curl "${GRAVIS}.install-jdk-travis.sh" --output ~/.install-jdk-travis.sh
  - export TARGET_JDK="${JDK}"
  - JDK="1.8"
  - source ~/.install-jdk-travis.sh

  # Set up Android SDK
  - |
    if [ $TRAVIS_OS_NAME == "osx" ]; then
      wget -q "https://dl.google.com/android/repository/sdk-tools-darwin-$ANDROID_TOOLS.zip" -O android-sdk-tools.zip
    else
      wget -q "https://dl.google.com/android/repository/sdk-tools-linux-$ANDROID_TOOLS.zip" -O android-sdk-tools.zip
    fi
  - unzip -q android-sdk-tools.zip -d ${ANDROID_HOME}
  - rm android-sdk-tools.zip

  # Avoid harmless sdkmanager warning
  - mkdir ~/.android
  - echo 'count=0' > ~/.android/repositories.cfg

  # Accept licenses before installing components, no need to echo y for each component
  - yes | sdkmanager --licenses >/dev/null

install:
  # Download SDK tools
  - sdkmanager "platform-tools" >/dev/null
  - sdkmanager "tools" >/dev/null # A second time per Travis docs, gets latest versions
  - sdkmanager "build-tools;28.0.3" >/dev/null # Implicit gradle dependency - gradle drives changes
  - sdkmanager "platforms;android-$API" >/dev/null # We need the API of the emulator we will run
  - sdkmanager "platforms;android-28" >/dev/null # We need the API of the current compileSdkVersion from gradle.properties
  - sdkmanager "emulator" >/dev/null
  - sdkmanager "extras;android;m2repository" >/dev/null
  - sdkmanager "system-images;android-$API;$EMU_FLAVOR;$ABI" >/dev/null # install our emulator

  # Create an Android emulator
  - echo no | avdmanager create avd --force -n test -k "system-images;android-$API;$EMU_FLAVOR;$ABI" -c 10M
  - EMU_PARAMS="-verbose -no-snapshot -no-window -camera-back none -camera-front none -selinux permissive -qemu -m 2048"
  # Disable acceleration for osx
  - if [ $TRAVIS_OS_NAME == "osx" ]; then EMU_PARAMS="${EMU_PARAMS} -no-accel"; fi
  - EMU_COMMAND="emulator"
  - |
    if [[ $ABI =~ "x86" ]]; then
      EMU_COMMAND="emulator-headless"
    fi
  # This double "sudo" monstrosity is used to have Travis execute the
  # emulator with its new group permissions and help preserve the rule
  # of least privilege.
  - sudo -E sudo -u $USER -E bash -c "${ANDROID_HOME}/emulator/${EMU_COMMAND} -avd test ${AUDIO} ${EMU_PARAMS} &"

  # install flutter (while emulator is starting)
  - |
    if [ $TRAVIS_OS_NAME == "osx" ]; then
      wget --quiet --output-document=flutter.zip https://storage.googleapis.com/flutter_infra/releases/${FLUTTER_CHANNEL}/macos/flutter_macos_v${FLUTTER_VERSION}.zip && unzip -qq flutter.zip > /dev/null && rm flutter.zip
    else
      sudo apt-get install -y --no-install-recommends lib32stdc++6 libstdc++6 > /dev/null
      wget --quiet --output-document=flutter.tar.xz https://storage.googleapis.com/flutter_infra/releases/${FLUTTER_CHANNEL}/linux/flutter_linux_v${FLUTTER_VERSION}.tar.xz && tar xf flutter.tar.xz > /dev/null && rm flutter.tar.xz
    fi
  - export PATH="$PATH":"$HOME/.pub-cache/bin"
  - export PATH=$PWD/flutter/bin:$PWD/flutter/bin/cache/dart-sdk/bin:$PATH
  - flutter doctor -v

  # Wait for emulator to be ready
  - ./script/android-wait-for-emulator.sh
  - adb shell input keyevent 82 &

  # Switch back to our target JDK version to build and run tests
  - JDK="${TARGET_JDK}"
  - source ~/.install-jdk-travis.sh

script:
  - cd flutter_app; flutter driver lib/main.dart

#before_cache:
#  - rm -f $HOME/.gradle/caches/modules-2/modules-2.lock
#  - curl "${GRAVIS}.clean_gradle_cache.sh" --output ~/.clean_gradle_cache.sh
#  - bash ~/.clean_gradle_cache.sh
#
#cache:
#  directories:
#    - $HOME/.gradle/caches/
#    - $HOME/.gradle/wrapper/